- name: EC2 instance deployment
  hosts: localhost
  vars_files:
    - "../inventory/group_vars/vars.yaml"
  gather_facts: false

  tasks:
    - name: Get your public IP
      ipify_facts:
      register: my_ip_facts

    - name: Create security group and allow SSH access  # Will create a group if it's not already created (with same name)
      ec2_group:
        name: "{{ security_group }}"
        description: "Security group for training for {{ user }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: "{{ my_ip_facts.ansible_facts.ipify_public_ip }}/32"
            rule_desc: "Allow access on port 22 from my computer"
      tags: creating

    - name: Create the EC2 instance
      ec2_instance:
        name: "{{ instance_name }}"
        key_name: "{{ key_pair_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ image_id }}"
        region: "{{ aws_region }}"
        security_group: "{{ security_group }}"
        tags:
          user: "{{ user }}"
        count: 1  # number of instances
        state: started
        wait: true
      register: ec2
      tags: creating

    - debug:
        msg: "Public IP: {{ ec2['instances'][0].public_ip_address }}, Public DNS name: {{ ec2['instances'][0].public_dns_name }}"
      tags: info

    - name: Add the instance to the inventory
      add_host:
        name: "{{ ec2['instances'][0].public_dns_name }}"
        ansible_user: ubuntu
        host_key_checking: false
        groups: "aws_ec2"
      no_log: false
      tags: creating

    - name: Write the new EC2 instance key to "known_hosts"
      shell: "ssh-keyscan {{ ec2['instances'][0].public_dns_name }} >> ~/.ssh/known_hosts"
      tags: creating

- name: Training pipeline
  hosts: aws_ec2
  user: ubuntu
  vars_files:
    - "../inventory/group_vars/vars.yaml"
  gather_facts: false

  tasks:

    - name: Copy data into instance
      copy:
        src: "/app/{{ EXAMPLE_DIRECTORY }}"
        dest: /home/ubuntu
        directory_mode:
      tags: training

    - name: Build the environment in the instance
      shell: |
        cd tensorflow-to-larod-artpec8 && chmod +x build_env.sh && ./build_env.sh
      tags: training

    - name: Train in the environment
      shell: |
        cd tensorflow-to-larod-artpec8
        docker run --gpus all -dit --name training tensorflow-to-larod-a8
        docker exec training python3 training/train.py -i data/images/val2017/ -a data/annotations/instances_val2017.json
        docker exec training python3 convert_model.py -i models/trained_model.pb -o app/converted_model.tflite
        docker cp training:/env/app/converted_model.tflite .
      tags: training

    - name: Collect model
      fetch:
        src: /home/ubuntu/tensorflow-to-larod-artpec8/converted_model.tflite
        dest: /app/converted_model.tflite
      tags: training, cleanup

- name: Cleanup
  hosts: localhost
  vars_files:
    - "../inventory/group_vars/vars.yaml"
  gather_facts: false
  tasks:

    - name: Gather information about EC2 instance
      ec2_instance_info:
        region: "{{ aws_region }}"
        filters:
          instance-state-name: "running"
          "tag:user": "{{ user }}"
      register: ec2_instances
      tags: cleanup

    - name: Terminate EC2 instance
      ec2_instance:
        key_name: "{{ key_pair_name }}"
        region: "{{ aws_region }}"
        state: "terminated"
        instance_ids: "{{ item.instance_id }}"
        wait: true
      loop: "{{ ec2_instances.instances }}"
      tags: cleanup

    - name: Remove from "known_hosts"
      known_hosts:
        name: "{{ item.public_dns_name }}"
        path: "~/.ssh/known_hosts"
        state: absent
      loop: "{{ ec2_instances.instances }}"
      tags: cleanup
