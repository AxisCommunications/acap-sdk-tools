- name: EC2 instance deployment
  hosts: localhost
  vars_files:
    - "../inventory/group_vars/vars.yaml"
  gather_facts: false

  tasks:
    - name: Getting my public IP
      ipify_facts:
      register: my_ip_facts

    - name: Creating security group and allowing SSH access # Will create a group if it's not already created (with same name)
      ec2_group:
        name: "{{ security_group }}"
        description: "Security group for training for {{ user }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: "{{ my_ip_facts.ansible_facts.ipify_public_ip }}/32"
            rule_desc: "Allow access on port 22 from my computer"
      tags: creating

    - name: Creating the EC2 instance
      ec2_instance:
        name: "{{ instance_name }}"
        key_name: "{{ key_pair_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ image_id }}"
        region: "{{ aws_region }}"
        security_group: "{{ security_group }}"
        tags:
          user: "{{ user }}"
        count: 1 # number of instances
        state: started #running
        wait: true
      register: ec2
      tags: creating

    - debug:
        msg: "Public IP: {{ ec2['instances'][0].public_ip_address }}, Public DNS name: {{ ec2['instances'][0].public_dns_name }}"
      when: ec2.instances|length == 1
      tags: info

    - name: Adding instance to inventory
      add_host:
        name: "{{ ec2['instances'][0].public_dns_name }}"
        ansible_user: ubuntu
        host_key_checking: false
        groups: "aws_ec2"
      no_log: false
      when: ec2.instances|length == 1
      tags: creating

    - name: Writing the new EC2 instance host key to known hosts
      shell: "ssh-keyscan {{ ec2['instances'][0].public_dns_name }} >> ~/.ssh/known_hosts"
      when: ec2.instances|length == 1
      tags: creating

    - name: Train prep
      shell:
        scp -r -i "../{{ key_pair_name }}.pem" "{{ EXAMPLE_DIRECTORY }}" ubuntu@{{ ec2['instances'][0].public_dns_name }}:/home/ubuntu
      tags: training

- name: Training pipeline
  hosts: aws_ec2
  user: ubuntu
  vars_files:
    - "../inventory/group_vars/vars.yaml"
  gather_facts: false

  tasks:

    - name: Building environment in instance
      shell: cd tensorflow-to-larod-artpec8 && ./build_env.sh
      tags: training

    - name: Training
      shell: |
        cd tensorflow-to-larod-artpec8
        docker run --gpus all -dit --name training tensorflow-to-larod-a8
        docker exec training python3 training/train.py -i data/images/val2017/ -a data/annotations/instances_val2017.json && python3 convert_model.py -i models/trained_model.pb -o app/converted_model.tflite
        docker cp training:/env/app/converted_model.tflite .
      tags: training

- name: Cleanup
  hosts: localhost
  vars_files:
    - "../inventory/group_vars/vars.yaml"
  gather_facts: false
  tasks:
    - name: Collecting model
      shell:
        scp -r -i "../{{ key_pair_name }}.pem" ubuntu@{{ ec2['instances'][0].public_dns_name }}:/home/ubuntu/tensorflow-to-larod-artpec8/converted_model.tflite .
      tags: training

    - name: Terminating AWS instance
      ec2_instance:
        key_name: "{{ key_pair_name }}"
        region: "{{ aws_region }}"
        state: "terminated"
        instance_ids: "{{ ec2['instances'][0].instance_id }}"
        wait: True
      tags: cleanup

    - name: Removing from known_hosts
      known_hosts:
        name: "{{ ec2['instances'][0].public_dns_name }}"
        path: "~/.ssh/known_hosts"
        state: absent
      when: ec2.instances|length == 1
